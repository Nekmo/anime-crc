#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
CRC32 generator and checker. 
2017-13-08 v0.5-dev

Based on crc script version 0.2 (2009.01.25) by:
Copyright (c) 2009, Taoufik El Aoumari

Modified by nekmo and ntrrgc to add several features:

- Add CRC32 codes to files
- More Pythonic code
- Fix size == 0 bug
- Logging
- Console arguments
- Compute CRC32 on files missing it without renaming them
- Customizable logging level
- Ported to Python3
- Recursive exploration
- Locale-aware sorting in recursive exploration

Released under the GPL license http://www.gnu.org/licenses/gpl-3.0.txt
"""

import sys, re, zlib, os
import logging
import locale

locale.setlocale(locale.LC_ALL, "")


def cmp_to_key(mycmp):
    'Convert a cmp= function into a key= function'

    class K:
        def __init__(self, obj, *args):
            self.obj = obj

        def __lt__(self, other):
            return mycmp(self.obj, other.obj) < 0

        def __gt__(self, other):
            return mycmp(self.obj, other.obj) > 0

        def __eq__(self, other):
            return mycmp(self.obj, other.obj) == 0

        def __le__(self, other):
            return mycmp(self.obj, other.obj) <= 0

        def __ge__(self, other):
            return mycmp(self.obj, other.obj) >= 0

        def __ne__(self, other):
            return mycmp(self.obj, other.obj) != 0

    return K


import argparse

# Colors
c_null = "\x1b[00;00m"
c_red = "\x1b[31;01m"
c_green = "\x1b[32;01m"
p_reset = "\x08" * 8

# Pattern for new file names
base = '%s [%s]'


def crc32_checksum(filename):
    """Calculate the CRC32 checksum of a file.
    Returns the CRC32 code as an hexadecimal string."""

    crc = 0
    file = open(filename, "rb")
    buff_size = 65536
    size = os.path.getsize(filename)
    done = 0

    if not size:
        # Empty file, quit
        logging.error('The file %s is empty' % filename)
        return
    try:
        while True:
            # While there is some data remaining...
            data = file.read(buff_size)
            done += buff_size
            # ... show our progress
            sys.stdout.write("%7d" % (done * 100 / size) + "%" + p_reset)
            if not data:
                # No more data, quit
                break
            crc = zlib.crc32(data, crc)
    except KeyboardInterrupt:
        # ^C was pressed in the terminal, reset the terminal and exit the
        # program
        sys.stdout.write(p_reset)
        file.close()
        sys.exit(1)
    sys.stdout.write("")  # TODO: useless?
    file.close()

    # If running in Python2: ensure CRC is a positive number
    # https://docs.python.org/3/library/zlib.html#zlib.crc32
    if crc < 0:
        crc &= 2 ** 32 - 1

    return "%.8X" % crc


def check(files):
    """Check CRC32 for the provided file name list."""
    for file in files:
        try:
            # Find CRC32 within the file name
            dest_sum = re.split("\[([a-fA-F0-9]{8})\]", file)
            if len(dest_sum) < 2:
                logging.debug('%s does not have CRC in file name' % file)
                continue
            dest_sum = dest_sum[-2]

            # Calculate CRC32
            crc = crc32_checksum(file)
            if not crc:
                continue  # empty file

            # Check the computed CRC32 matches the declared CRC32
            if crc == dest_sum.upper():
                c_in = c_green
                level = 'info'
            else:
                c_in = c_red
                level = 'warning'
            sfile = file.split(dest_sum)
            getattr(logging, level)("%(c_in)s%(crc)s%(c_null)s  " \
                                    "%(sfile0)s%(c_in)s%(dest_sum)s%(c_null)s%(sfile1)s" % \
                                    {'c_in': c_in, 'c_null': c_null,
                                     'sfile0': sfile[0],
                                     'sfile1': sfile[1], 'dest_sum': dest_sum,
                                     'crc': crc})
        except(IndexError, ValueError):
            logging.error(crc + "   " + file)
        except IOError as e:
            logging.error(e)
            continue


def addcrc32(files):
    """Add a CRC32 code to files missing it."""
    for file in files:
        try:
            # Calculate CRC32
            crc = crc32_checksum(file)
            if not crc:
                return
            if '.' in file:
                # The file name contains a dot (therefore, an extension)
                file_split = file.split('.')
                ext = '.' + file_split[-1]
                new_file = base % ('.'.join(file_split[0:-1]), crc)
            else:
                # No extension
                ext = ''
                new_file = base % (file, crc)
            # Log the name change
            logging.info('%s -> %s' % (file, new_file + ext))
            os.rename(file, new_file + ext)
        except(IndexError, ValueError):
            print(crc + "   " + file)
        except IOError as e:
            print(e)
            continue


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=
                                     'CRC32 generator and checker.')
    # addcrc32
    parser.add_argument('-a', '--addcrc32', dest='addcrc32', nargs='+',
                        help='Generate CRC32 for files and rename them.')
    # Recursive
    parser.add_argument('-r', dest='recursive', action='store_const',
                        const=True, default=False,
                        help='Explore directories recursively.')
    # log level
    parser.add_argument('--debug', dest='level', action='store_const',
                        const=logging.DEBUG, default=logging.INFO,
                        help='Set log level to debugging messages.')
    parser.add_argument('--warning', dest='level', action='store_const',
                        const=logging.WARNING, default=logging.INFO,
                        help='Set log level to warnings (hides successful files).')
    parser.add_argument('--error', dest='level', action='store_const',
                        const=logging.ERROR, default=logging.INFO,
                        help='Log only program errors.')  # TODO: useless?
    # check
    parser.add_argument('check', nargs='*',
                        help='Check CRC32 of files.')
    args = parser.parse_args()

    # Recursive
    if args.recursive:
        file_list = []
        for rootdir in args.check:
            for root, subFolders, files in os.walk(rootdir):
                files.sort(key=cmp_to_key(locale.strcoll))
                subFolders.sort(key=cmp_to_key(locale.strcoll))
                for file in files:
                    f = os.path.join(root, file)
                    file_list.append(f)
        args.check.extend(file_list)
    # Set log level
    logging.basicConfig(level=args.level, format='%(levelname)-8s %(message)s')

    if args.addcrc32:
        # Add CRC32 to files
        addcrc32(args.addcrc32)
    elif not args.check:
        print('No arguments specified.')
    else:
        # Check CRC32 of files
        check(args.check)
